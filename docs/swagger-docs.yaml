openapi: 3.1.0

info:
  title: 'News Aggregator APIs'
  version: 1.0.0

servers:
- url: 'https://newsaggregator-mern.onrender.com'
  description: 'Live server'

components:
  schemas:
    Article:
      type: 'object'
      properties:
        guid:
          type: 'string'
        article_link:
          type: 'string'
        website_source:
          type: 'string'
        article_title:
          type: 'string'
        type_:
          type: 'string'
        author:
          type: 'string'
        article_summary:
          type: 'string'
        article_detailed_content:
          type: 'string'
        creation_date:
          type: 'string'
        thumbnail_image:
          type: 'string'
        categories:
          type: 'array'
          items:
            type: 'string'
      example:
        guid: 'bWFrZWxvdmUsbm90d2FyPw=='
        article_link: 'foobar.com'
        website_source: 'foobar'
        article_title: 'Foo Bar'
        _type: 'article'
        author: 'FooBarFooBar'
        article_summary: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
        article_detailed_content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
        creation_date: '2021-09-01T00:00:00.000Z'
        thumbnail_image: 'https://foobar.com/image.jpg'
        categories: ['foo', 'bar']
    User:
      type: 'object'
      properties:
        email:
          type: 'string'
        password:
          type: 'string'
      example:
        email: 'loremipsum@gmail.com'
        password: 'loremipsum'
    Post:
      type: 'object'
      properties:
        guid:
          type: 'string'
        post_link:
          type: 'string'
        website_source:
          type: 'string'
        post_title:
          type: 'string'
        type_:
          type: 'string'
        author:
          type: 'string'
        post_content:
          type: 'string'
        creation_date:
          type: 'string'
        upvotes:
          type: 'number'
        downvotes:
          type: 'number'
        categories:
          type: 'array'
          items:
            type: 'string'
      example:
        guid: 'bWFrZWxvdmUsbm90d2FyPw=='
        post_link: 'foobar.com'
        website_source: 'foobar'
        post_title: 'Foo Bar'
        type_: 'post'
        author: 'FooBarFooBar'
        post_content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
        creation_date: '2021-09-01T00:00:00.000Z'
        upvotes: 84
        downvotes: 0
        categories: ['foo', 'bar']
    Coin:
      type: 'object'
      properties:
        rank:
          type: 'number'
        btc_price:
          type: 'number'
        prices:
          type: 'array'
          items:
            date:
              type: 'string'
            price:
              type: 'number'
        thumbnail_image:
          type: 'string'
      example:
        rank: 1
        btc_price: 1
        prices:
          "2024-05-14T20:27:00Z" : '61618.47'
        thumbnail_image: "https://assets.coincap.io/assets/icons/btc@2x.png"
      

paths:
  /v1/articles?page={page}&limit={limit}:
    get:
      description: 'Get all articles'
      tags:
      - 'Articles'
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The page number you want to get'
        required: true
        schema:
          type: 'number'
      - name: 'limit'
        in: 'query'
        description: 'The number of articles you want to get'
        required: true
        schema:
          type: 'number'
      responses:
        200:
          description: 'Show the number of avaliable articles and an array of articles'
        500:
          description: 'Show error message'
  
  /v1/articles:
    post:
      description: 'Create an article'
      tags:
      - 'Articles'
      requestBody:
        description: 'Create an article'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        400:
          description: 'All fields are required!!!'
        200:
          description: 'Article created'
        500:
          description: 'Show error message'

  /v1/articles/{id}:
    delete:
      description: 'Delete an article'
      tags:
      - 'Articles'
      parameters:
      - name: 'id'
        in: 'path'
        description: 'ID of the article that you want to delete'
        required: true
        schema:
          type: 'string'
      responses:
        200:
          description: 'Article was deleted'
        400:
          description: 'Incorrect id'
        404:
          description: 'Article not found'
        500:
          description: 'Show error message'
    
    put:
      description: 'Update an article'
      tags:
      - 'Articles'
      parameters:
      - name: 'id'
        in: 'path'
        description: 'ID of the article that you want to delete'
        required: true
        schema:
          type: 'string'
      requestBody:
        description: 'Update an existing article'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        200:
          description: 'Article was updated'
        400:
          description: '[ All fields required, Incorrect id ]'
        404:
          description: 'Article not found'
        500:
          description: 'Show error message'

  /v1/articles/search?text={text}&sort={sortOrder}&page={page}&limit={limit}:
    get:
      description: 'Full-text search'
      tags:
      - 'Articles'
      parameters:
      - name: 'text'
        in: 'path'
        description: 'The term you want to search'
        required: true
        schema:
          type: 'string'
      - name: 'sortOrder'
        in: 'path'
        description: 'The sort order, `asc` to sort Oldest articles first and `desc` to sort Newest articles first'
        required: true
        schema:
          type: 'string'
      - name: 'page'
        in: 'path'
        description: 'The page number'
        required: true
        schema:
          type: 'integer'
      - name: 'limit'
        in: 'path'
        description: 'The number of articles per page'
        required: true
        schema:
          type: 'integer'

      responses:
        200:
          description: 'Show the result'
        500:
          description: 'Show error message'

  /v1/articles/autocomplete:
    get:
      description: 'Autocomplete search'
      tags:
      - 'Articles'
      parameters:
      - name: 'text'
        in: 'path'
        description: 'The term you want to search'
        required: true
    responses:
      200:
        description: 'Show the result'
      500:
        description: 'Show error message'

  /v1/posts?page={page}&limit={limit}:
    get:
      description: 'Get all posts'
      tags:
      - 'Posts'
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The page number you want to get'
        required: true
        schema:
          type: 'number'
      - name: 'limit'
        in: 'query'
        description: 'The number of posts you want to get'
        required: true
        schema:
          type: 'number'
      responses:
        200:
          description: 'Show the number of avaliable posts and an array of posts'
        500:
          description: 'Show error message'

  /v1/posts/search?text={text}&sort={sortOrder}&page={page}&limit={limit}:
    get:
      description: 'Full-text search'
      tags:
      - 'Posts'
      parameters:
      - name: 'text'
        in: 'path'
        description: 'The term you want to search'
        required: true
        schema:
          type: 'string'
      - name: 'sortOrder'
        in: 'path'
        description: 'The sort order, `asc` to sort Oldest posts first and `desc` to sort Newest posts first'
        required: true
        schema:
          type: 'string'
      - name: 'page'
        in: 'path'
        description: 'The page number'
        required: true
        schema:
          type: 'integer'
      - name: 'limit'
        in: 'path'
        description: 'The number of posts per page'
        required: true
        schema:
          type: 'integer'
      responses:
        200:
          description: 'Show the result'
        500:
          description: 'Show error message'
  /v1/coins?limit={limit}:
    get:
      description: 'Get {limit} coins'
      tags:
      - 'Coins'
      responses:
        200:
          description: 'Show the number of avaliable coins and and array of coins'
        500:
          description: 'Show error message'
  /v1/coins/{symbol}:
    get:
      description: 'Get info of a specific coin by symbol'
      tags:
      - 'Coins'
      responses:
        200:
          description: "Show the coin's info"
        500:
          description: 'Show error message'
        400:
          description: 'Coin symbol must not be null/undefined'
  /v1/categories/articles:
    get:
      description: 'Get 10 most categories for articles'
      tags:
      - 'Categories'
      responses:
        200:
          description: 'Show the number of avaliable categories and an array of articles guid'
        500:
          description: 'Show error message'

  /v1/categories/articles/search?text={text}&opt={opt}:
    get:
      description: 'Find a category for articles'
      tags:
      - 'Categories'
      parameters:
      - name: 'text'
        in: 'path'
        description: 'The name of the category you want to search'
        required: true
      - name: 'opt'
        in: 'path'
        description: 'Options when searching: "e" for exact search, "r" for regex starts with "text"'
        required: false
      responses:
        400:
          description: 'Category name is required'
        200:
          description: 'Found {count} articles for categories named {text}'
        500:
          description: 'Show error message'

  /v1/categories/posts:
    get:
      description: 'Get 10 most popular categories for posts'
      tags:
      - 'Categories'
      responses:
        200:
          description: 'Show the number of avaliable categories and an array of posts guid'
        500:
          description: 'Show error message'

  /v1/categories/posts/search?text={text}&opt={opt}:
    get:
      description: 'Find a category for posts'
      tags:
      - 'Categories'
      parameters:
      - name: 'text'
        in: 'path'
        description: 'The name of the category you want to search'
        required: true
      - name: 'opt'
        in: 'path'
        description: 'Options when searching: "e" for exact search, "r" for regex starts with "text"'
        required: false
      responses:
        400:
          description: 'Category name is required'
        200:
          description: 'Found {count} posts for categories named {text}'
        500:
          description: 'Show error message'

  /v1/users/signup:
    post:
      description: 'Register a new user'
      tags:
      - 'Users'
      requestBody:
        description: 'Adding user credentials'
        required: true
        content:
          application/json:
            schema:
              email:
                type: 'string'
              password:
                type: 'string'
            example:
              email: 'loremipsum@gmail.com'
              password: 'loremipsum'
      responses:
        200:
          description: 'Show the registered email'
        400:
          description: '[ All fields are required, User already exists ]'
        500:
          description: 'Show error message'

  /v1/users/login:
    post:
      description: 'Login existing user'
      tags:
      - 'Users'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: "Show the login account's email"
        400:
          description: '[ All fields are required, Incorrect email, Incorrect password ]'
        500:
          description: 'Show error message'

  /v1/users/credentials:
    put:
      description: 'Update password for existing users'
      tags:
      - 'Users'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

  /v1/users/subscription:
    put:
      description: 'Update exsting users subscription'
      tags:
      - 'Users'
      requestBody:
        content:
          application/json:
            schema:
              email:
                type: 'string'
              subscribe:
                type: 'string'
                description: 'The name of the news provider user want to subscribe'
              unsubscribe:
                type: 'string'
                description: 'The name of the news provider user want to unsubscribe'
            examples:
              Subscribe:
                value:
                  email: 'loremipsum@gmail.com'
                  subscribe: 'crypto.news'
              Unsubscribe:
                value:
                  email: 'loremipsum@gmail.com'
                  unsubscibe: 'crypto.news'
      responses:
        200:
          description: 'Success'
        400:
          description: '[ Email is required, 
                          Subscription is required, 
                          Subscription already exist if you subscribe to an already subscribed source, 
                          Subscription does not exist if you unsubscibe to a news source that you have not yet subscribe ]'
        404:
          description: 'User does not exist'
        500:
          description: 'Show error message'

    
  

